import{h as b,k as E,n as y,o as k,p as M,q as C}from"./chunk-EOEX4TEI.js";import{Bb as S,Cb as w,Gb as u,Ib as p,S as g,Sa as v,X as s,Y as d,ja as i,ka as t,la as r,ob as _,pa as c,wb as m,x as o,za as e}from"./chunk-TWFV6OAI.js";var F=(()=>{class n{static \u0275fac=function(a){return new(a||n)};static \u0275mod=d({type:n});static \u0275inj=o({})}return n})();var h=(()=>{class n{static \u0275fac=function(a){return new(a||n)};static \u0275mod=d({type:n});static \u0275inj=o({imports:[m,_,m]})}return n})();var R=(()=>{class n{static \u0275fac=function(a){return new(a||n)};static \u0275mod=d({type:n});static \u0275inj=o({imports:[m,h,h,F,m]})}return n})();var L=(()=>{class n{constructor(l){this.dialog=l}openSlides(){this.dialog.open(C,{width:"1000px",height:"600px",enterAnimationDuration:"1500ms",exitAnimationDuration:"0ms"})}static{this.\u0275fac=function(a){return new(a||n)(g(k))}}static{this.\u0275cmp=s({type:n,selectors:[["app-learn-more"]],standalone:!1,decls:396,vars:0,consts:[[1,"doc-navbar"],[1,"marketing-banner"],[1,"banner-headline","no-toc","no-anchor"],[1,"center-layout"],[1,"feature-section"],[1,"feature-header"],[1,"text-headline"],["src","../../assets/images/docs/loved-by-millions.svg","alt","Feature icon"],[1,"feature-row"],[1,"feature"],[1,"feature-title"],[1,"text-body"],["src","../../assets/images/docs/bias.svg","alt","Feature icon"],["href","https://packer.io","target","_blank"],[1,"multicol"],["href","https://docker.com","target","_blank"],["href","https://en.wikipedia.org/wiki/Unikernel","target","_blank"],["href","https://opencontainers.org","target","_blank"],["href","https://en.wikipedia.org/wiki/VMDK","target","_blank"],["href","https://en.wikipedia.org/wiki/VHD_(file_format)","target","_blank"],["href","https://en.wikipedia.org/wiki/Comparison_of_platform_virtualization_software","target","_blank"],["href","https://en.wikipedia.org/wiki/LAMP_(software_bundle)","target","_blank"],["href","https://en.wikipedia.org/wiki/Windows_Installer","target","_blank"],["href","https://en.wikipedia.org/wiki/List_of_built-in_macOS_apps#Installer","target","_blank"],["href","https://en.wikipedia.org/wiki/Apple_Disk_Image","target","_blank"],["href","https://en.wikipedia.org/wiki/RPM_Package_Manager","target","_blank"],["href","https://en.wikipedia.org/wiki/Deb_(file_format)","target","_blank"],["href","https://en.wikipedia.org/wiki/Daemon_(computing)","target","_blank"],["href","https://en.wikipedia.org/wiki/Puppet_(software)","target","_blank"],["href","https://en.wikipedia.org/wiki/Progress_Chef","target","_blank"],["href","https://en.wikipedia.org/wiki/Ansible_(software)","target","_blank"],["href","https://en.wikipedia.org/wiki/CFEngine","target","_blank"],["href","https://en.wikipedia.org/wiki/Salt_(software)","target","_blank"],["href","https://github.com/sharkdp/hyperfine","target","_blank"],["href","https://github.com/fcsonline/drill","target","_blank"],["routerLink","/doc/verman-spec"],["src","../../assets/images/docs/loved-by-millions.svg","alt","License icon"],["src","../../assets/images/docs/copyright-license.svg","alt","License icon"],["href","https://github.com/offscale/version-manager-rs","target","_blank"],["href","https://github.com/offscale/mariadb-version-manager-rs","target","_blank"],["href","https://github.com/verman-io/verman-schema-rs","target","_blank"],["href","https://github.com/offscale/postgres-version-manager-go","target","_blank"],["href","https://github.com/offscale/libacquire","target","_blank"],[1,"cta-bar","announcement-bar",2,"display","flex","flex-direction","column","gap","12px","text-align","center"],[1,"button",3,"click"],["href","https://github.com/verman-io/verman-presentations/releases/download/init/packaging-solutions.pdf","target","_blank",1,"button",2,"margin-left","8px","display","flex","align-items","center","justify-content","center"]],template:function(a,x){a&1&&(r(0,"div",0),i(1,"header",1)(2,"h1",2),e(3,"Elaboration"),t()(),i(4,"article",3)(5,"div",4)(6,"div",5)(7,"div",6),e(8,"Why"),t(),r(9,"img",7),t(),i(10,"div",8)(11,"div",9)(12,"div",10),e(13,"Docker is overkill"),t(),i(14,"p",11),e(15,"Build time, image sizes, architectural complexity."),t()(),i(16,"div",9)(17,"div",10),e(18,"Native performance with no overhead"),t(),i(19,"p",11),e(20,"Bootstrapping done natively by way of version managers."),t()(),i(21,"div",9)(22,"div",10),e(23,"Remove complexity"),t(),i(24,"p",11),e(25,'"Getting started" guides become one-liners.'),t()()(),r(26,"hr"),t(),i(27,"div",4)(28,"div",5)(29,"div",6),e(30,"Our definition of version manager"),t(),r(31,"img",12),t(),i(32,"div",8)(33,"div",9)(34,"div",10),e(35,"Specify version of software wanted"),t(),i(36,"p",11),e(37,'Semantic version support, "latest", "stable", "beta".'),t()(),i(38,"div",9)(39,"div",10),e(40,"Support multiple concurrently installed"),t(),i(41,"p",11),e(42,"Useful for both testing and supporting applications which haven't been updated."),t()(),i(43,"div",9)(44,"div",10),e(45,"Depend on multiple version managers"),t(),i(46,"p",11),e(47,"E.g., for combining [verMan] database, application-server, reverse-proxy, and your application into one [new] package manager."),t()(),i(48,"div",9)(49,"div",10),e(50,"Configuration"),t(),i(51,"p",11),e(52,"Global, project-global, and local configurations."),t(),i(53,"p",11),e(54,"Stores everything from directory paths to database authentication details."),t()()(),r(55,"hr"),t(),i(56,"div",4)(57,"div",5)(58,"div",6),e(59,"Use-cases"),t()(),i(60,"div",9)(61,"div",10),e(62,"Image creation"),t(),i(63,"p",11),e(64,"Rather than custom scripts for each target, or a non-standard format like the [now] closed-source "),i(65,"a",13),e(66,"HashiCorp Packer"),t(),e(67,"; instead you can use your vendor-specific format and just add ~3 lines (download, extract, execute). Now instead of a "),i(68,"code"),e(69,"Dockerfile"),t(),e(70," limited to Docker; you can now trivially target:"),t(),i(71,"ul",14)(72,"li")(73,"a",15),e(74,"Docker"),t()(),i(75,"li")(76,"a",16),e(77,"Unikernel"),t()(),i(78,"li")(79,"a",17),e(80,"OCI"),t()(),i(81,"li"),e(82,"Cloud image"),t(),i(83,"li")(84,"a",18),e(85,"VMDK"),t()(),i(86,"li")(87,"a",19),e(88,"VHD"),t()(),i(89,"li")(90,"a",19),e(91,"VHD"),t()(),i(92,"li"),e(93,"Others (see "),i(94,"a",20),e(95,"Comparison of platform virtualization software"),t(),e(96,") "),t()()(),i(97,"div",9)(98,"div",10),e(99,"Package creation"),t(),i(100,"p",11),e(101,"Centralise packaging, e.g., to make generic the old "),i(102,"a",21),e(103,"LAMP (software bundle)"),t(),e(104,"; handling:"),t(),i(105,"ul",14)(106,"li"),e(107,"Windows (.exe)"),t(),i(108,"li"),e(109,"Windows ("),i(110,"a",22),e(111,".msi"),t(),e(112,")"),t(),i(113,"li"),e(114,"macOS ("),i(115,"a",23),e(116,".pkg"),t(),e(117,") "),t(),i(118,"li"),e(119,"macOS ("),i(120,"a",24),e(121,".dmg"),t(),e(122,")"),t(),i(123,"li"),e(124,"[Linux] Red Hat compat. ("),i(125,"a",25),e(126,".rpm"),t(),e(127,") "),t(),i(128,"li"),e(129,"[Linux] Debian compat. ("),i(130,"a",26),e(131,".deb"),t(),e(132,") "),t(),i(133,"li"),e(134,"Regular archive for all supported OSs"),t(),i(135,"li"),e(136,"\u2026"),t()(),i(137,"p",11),e(138,"Including the various triggers like:"),t(),i(139,"ul",14)(140,"li"),e(141,"Install"),t(),i(142,"li"),e(143,"Uninstall"),t(),i(144,"li")(145,"a",27),e(146,"Daemon"),t(),e(147," configuration"),t(),i(148,"li"),e(149,"Automatic facilitation of side-by-side installs"),t()()(),i(150,"div",9)(151,"div",10),e(152,"Configuration Management"),t(),i(153,"p",11),e(154,"Similar to the aforementioned Image Creation; this replaces a large number of lines-of-code needed in existing systems."),t(),i(155,"ul",14)(156,"li")(157,"a",28),e(158,"Puppet"),t()(),i(159,"li")(160,"a",29),e(161,"Chef"),t()(),i(162,"li")(163,"a",30),e(164,"Ansible"),t()(),i(165,"li")(166,"a",31),e(167,"CFEngine"),t()(),i(168,"li")(169,"a",32),e(170,"Salt"),t()(),i(171,"li"),e(172,"\u2026"),t()()(),i(173,"div",9)(174,"div",10),e(175,"Bootstrapping"),t(),i(176,"p",11),e(177,"Docker, Kubernetes, Mesos and others all suffer from a bootstrapping problem. How does one deploy Kubernetes? - With Kubernetes? - How about testing a large number of different versions of Kubernetes to test when a regression first occurred; and after applying a patch; testing that it is resolved in all supported versions?"),t()(),i(178,"div",8)(179,"div",9)(180,"div",10),e(181,"Testing"),t(),i(182,"p",11),e(183," Comparing multiple versions and configuration permutations concurrently is complex. "),i(184,"em"),e(185,"VerMan"),t(),e(186," simplifies this testing. "),t()(),i(187,"div",9)(188,"div",10),e(189,"Benchmarking"),t(),i(190,"p",11),e(191,"Much like testing, benchmarking is also simplified through "),i(192,"em"),e(193,"VerMan"),t(),e(194,". Docker and friends add overhead compounded by various areas of caching and nondeterminism. For example, "),i(195,"a",33)(196,"code"),e(197,"hyperfine"),t()(),e(198," and "),i(199,"a",34)(200,"code"),e(201,"drill"),t()(),e(202," can now be used indiscriminately."),t()(),i(203,"div",9)(204,"div",10),e(205,"CI"),t(),i(206,"p",11),e(207," GitHub Actions, Travis CI, Circle CI, and all the other CI systems (including in-house) each have their own Domain Specific Language for specifying what to download, cache, and what versions to test across. "),i(208,"em"),e(209,"VerMan"),t(),e(210," greatly simplifies this process, and if you're careful, can provide better caching and resource usage (particularly when you have small quotas/budgets for your CI). It can also be used to build and maintain new/existing CI systems. "),t()()(),i(211,"div",9)(212,"div",10),e(213,"Quick start guides"),t(),i(214,"p",11),e(215," It is common to see quick-start guides like: "),t(),i(216,"ol")(217,"li"),e(218,"Install docker"),t(),i(219,"li"),e(220,"Run "),i(221,"code"),e(222,"docker compose up"),t()()(),i(223,"p",11),e(224," Which hides all the architectural information about: what components make-up the stack; how they talk to each other; and what is substitutable. A carefully written quick-start guide with "),i(225,"em"),e(226,"verMan"),t(),e(227," might look something like: "),t(),i(228,"ol")(229,"li"),e(230,"Download version manager for "),i(231,"code"),e(232,"verman"),t()(),i(233,"li")(234,"code"),e(235,"verman run latest -c .config/verman.toml"),t()(),i(236,"li"),e(237,"See configuration file for stack details and various other points (like data locations and authentication details). Importantly, it is trivial from this format to mix-and-match layers\u2014like database or web-server\u2014including replacing them with a cloud aaS offering. "),t()(),i(238,"p",11),e(239," Which adds an easy to understand configuration file. For an example "),i(240,"code"),e(241,"verman.toml"),t(),e(242,"; see "),i(243,"a",35),e(244,"verman-toml specification"),t(),e(245,". "),t()(),i(246,"div",8)(247,"div",9)(248,"div",10),e(249,"Performance critical environments"),t(),i(250,"p",11),e(251,"Run code natively. No-holds-barred."),t()(),i(252,"div",9)(253,"div",10),e(254,"Replicating bugs"),t(),i(255,"p",11),e(256,' Users reporting bugs specify their stack, including operating system, database, web server, and invocation (e.g., HTTPS call) which causes the bug. Without cross-platform package managers for each part of the stack, replicating bugs is a cumbersome process often delegated back to the reporter ("did that work?"). '),t()()(),i(257,"div",8)(258,"div",9)(259,"div",10),e(260,"Multitenancy with fine-grained resource constraints"),t(),i(261,"p",11),e(262,"Restrict memory, disk, and other I/O usage per database / application-server / application (&etc.)."),t()(),i(263,"div",9)(264,"div",10),e(265,"Building aaS environments"),t(),i(266,"p",11),e(267,"It is difficult to run things as-a-Service. With verman you can pick the version of each part of the stack, experiment with different tracing/telemetry and logging tooling, and easily serve multiple versions concurrently."),t()(),i(268,"div",9)(269,"div",10),e(270,"Experimenting with equivalent stack components"),t(),i(271,"p",11),e(272,"Benchmarking is a difficult task. Which web-server is the best? - How about for my workload? - How about database? - Being able to easily test multiple parts of the stack and run stacks concurrently makes comparing stacks trivial."),t()()(),r(273,"hr"),t(),i(274,"div",4)(275,"div",5)(276,"div",6),e(277,"Future areas of exploration"),t(),r(278,"img",36),t(),i(279,"div",8)(280,"div",9)(281,"div",10),e(282,"Clustering"),t(),i(283,"p",11),e(284,"Handle complexities related to supporting different clustering schemes. Including:"),t(),i(285,"ul")(286,"li"),e(287,"Master/slave"),t(),i(288,"li"),e(289,"Multi-master"),t(),i(290,"li"),e(291,"Multi-master with read-only slaves"),t(),i(292,"li"),e(293,"Consensus"),t()()(),i(294,"div",9)(295,"div",10),e(296,"Multicloud"),t(),i(297,"p",11),e(298,"Deploy applications or even package verMan up as a multi-tenant PaaS platform for deploying across multiple cloud vendors (concurrently, strategically, or based on configuration-priority)"),t()()(),i(299,"div",8)(300,"div",9)(301,"div",10),e(302,"Resource constraints"),t(),i(303,"p",11),e(304," Each OS has their own kernel-level features for limiting various resources. Sometimes this includes: CPU, GPU, disk-usage, RAM usage. If you're lucky, it also has network isolation features. A brief survey of technologies: "),t(),i(305,"ul")(306,"li"),e(307,"[Linux] cgroups and namespaces;"),t(),i(308,"li"),e(309,"[Windows] Sanboxie (old); Windows Containers (new)"),t(),i(310,"li"),e(311,"[SunOS] Zones;"),t(),i(312,"li"),e(313,"[FreeBSD & derivatives] jails."),t()()(),i(314,"div",9)(315,"div",10),e(316,"Dashboards (CLI, web, GUI)"),t(),i(317,"p",11),e(318,"Show what is deployed on target machine (e.g., local developer machine). Including interesting things like:"),t(),i(319,"ul")(320,"li"),e(321,"Tabulation of applications; including:"),t(),i(322,"ul")(323,"li"),e(324,"Installed"),t(),i(325,"li"),e(326,"Started"),t(),i(327,"li"),e(328,"Logs"),t()(),i(329,"li"),e(330,"Resource usage"),t(),i(331,"ul")(332,"li"),e(333,"Disk usage"),t(),i(334,"li"),e(335,"GPU, CPU, RAM"),t(),i(336,"li"),e(337,"Network"),t()()()()(),i(338,"div",8)(339,"div",9)(340,"div",10),e(341,"Logging"),t(),i(342,"p",11),e(343,"Stream log files to log server components. Like all other parts, each part of this stack should be configurable also (storage, queue, query-engine); all with globally relevant settings (object-storage location, retention policy, &etc.)."),t()(),i(344,"div",9)(345,"div",10),e(346,"Alerting"),t(),i(347,"p",11),e(348,"For security, performance and budgetary purposes it's important to have proper alerting available. This should link into the Logging stack as well as the cloud-vendor stack (esp. wrt. budget)."),t()()(),r(349,"hr"),t(),i(350,"div",4)(351,"div",5)(352,"div",6),e(353,"Open licensed and (somewhat) available today"),t(),r(354,"img",37),t(),i(355,"div",8)(356,"div",9)(357,"div",10),e(358,"Any cross-platform programming language"),t(),i(359,"p",11),e(360,"Examples in multiple languages. Recommended: Rust."),t(),i(361,"ul")(362,"li"),e(363,"Rust "),i(364,"ul")(365,"li")(366,"a",38),e(367,"version-manager-rs"),t(),e(368,";"),t(),i(369,"li")(370,"a",39),e(371," mariadb-version-manager-rs"),t(),e(372,"; "),t(),i(373,"li")(374,"a",40),e(375,"verman-schema-rs"),t(),e(376,"."),t()()(),i(377,"li")(378,"a",41),e(379,"Go"),t()(),i(380,"li")(381,"a",42),e(382,"C"),t()()()(),i(383,"div",9)(384,"div",10),e(385,"Permissive license"),t(),i(386,"p",11),e(387,"No restriction on commercial use; integration does not require relicensing of parent (no viral GPL); and patent-rights are guaranteed. Specifically: (Apache-2.0 OR MIT) license. "),t()()(),r(388,"hr"),t(),i(389,"div",43)(390,"a",44),c("click",function(){return x.openSlides()}),e(391,"Slides"),t(),i(392,"a",45),e(393,"Whitepaper (draft) "),i(394,"mat-icon"),e(395,"open_in_new"),t()()()())},dependencies:[u,S],styles:[".sidenav-content[_ngcontent-%COMP%]{min-height:100vh;padding:20px 3rem 2rem;max-width:50em;margin:0}@media screen and (max-width: 600px){.sidenav-content[_ngcontent-%COMP%]{min-height:450px;padding:80px 2rem 1rem}}@media screen and (max-width: 480px){.sidenav-content[_ngcontent-%COMP%]{padding:80px 1rem 1rem}}mat-form-field[_ngcontent-%COMP%]{width:100%}","@media screen and (min-width: 640px){.multicol[_ngcontent-%COMP%]{display:block;grid-template-columns:none}}@media screen and (min-width: 768px){.multicol[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(2,1fr)}}@media screen and (min-width: 1024px){.multicol[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(3,1fr)}}"]})}}return n})();var I=(()=>{class n{static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=s({type:n,selectors:[["app-verman-spec"]],standalone:!1,decls:724,vars:0,consts:[[1,"doc-navbar"],[1,"marketing-banner",2,"display","flex","justify-content","space-between"],[1,"banner-headline","no-toc","no-anchor"],["mat-raised-button","","routerLink",".","fragment","verman-toml",2,"background","#2E7D32","color","whitesmoke","justify-content","flex-end"],[1,"feature-section"],["id","verman",1,"feature-header"],[1,"text-headline",2,"text-transform","none"],[1,"feature",2,"margin","0 16px"],[1,"text-body"],["href","https://en.wikipedia.org/wiki/Language_Server_Protocol","target","_blank"],["id","command-line-help-for-name-version-manager-rs"],["routerLink",".","fragment","name-version-manager-rs"],["routerLink",".","fragment","name-version-manager-rs-download"],["routerLink",".","fragment","name-version-manager-rs-download-plan"],["routerLink",".","fragment","name-version-manager-rs-env"],["routerLink",".","fragment","name-version-manager-rs-install"],["routerLink",".","fragment","name-version-manager-rs-install-dependencies"],["routerLink",".","fragment","name-version-manager-rs-ls"],["routerLink",".","fragment","name-version-manager-rs-ls-remote"],["routerLink",".","fragment","name-version-manager-rs-uri"],["routerLink",".","fragment","name-version-manager-rs-service"],["routerLink",".","fragment","name-version-manager-rs-service-install"],["routerLink",".","fragment","name-version-manager-rs-service-install-open-rc"],["routerLink",".","fragment","name-version-manager-rs-service-install-systemd"],["routerLink",".","fragment","name-version-manager-rs-service-install-windows-service"],["routerLink",".","fragment","name-version-manager-rs-service-reload"],["routerLink",".","fragment","name-version-manager-rs-service-start"],["routerLink",".","fragment","name-version-manager-rs-service-stop"],["id","name-version-manager-rs"],["id","subcommands"],["id","options"],["id","name-version-manager-rs-download"],["id","arguments"],["id","name-version-manager-rs-download-plan"],["id","arguments-1"],["id","name-version-manager-rs-env"],["id","name-version-manager-rs-install"],["id","arguments-2"],["id","name-version-manager-rs-install-dependencies"],["id","arguments-3"],["id","name-version-manager-rs-ls"],["id","name-version-manager-rs-ls-remote"],["id","name-version-manager-rs-uri"],["id","name-version-manager-rs-service"],["id","subcommands-1"],["id","name-version-manager-rs-service-install"],["id","subcommands-2"],["id","name-version-manager-rs-service-install-open-rc"],["id","options-1"],["id","name-version-manager-rs-service-install-systemd"],["id","options-2"],["id","name-version-manager-rs-service-install-windows-service"],["id","options-3"],["id","name-version-manager-rs-service-reload"],["id","arguments-4"],["id","name-version-manager-rs-service-start"],["id","arguments-5"],["id","name-version-manager-rs-service-stop"],["id","arguments-6"],["id","verman-toml",1,"marketing-banner"],[1,"feature-header"],[2,"background","rgba(219, 219, 219, 0.3)","padding","0 20px"],[1,"feature-row"],[1,"feature-title"]],template:function(a,x){a&1&&(r(0,"div",0),i(1,"header",1)(2,"h2",2),e(3,"verMan specification"),t(),i(4,"button",3),e(5,"Scroll to verman.toml specification "),t()(),i(6,"div",4)(7,"div",5)(8,"div",6)(9,"code"),e(10,"{package_name}-version-manager"),t()()(),i(11,"div",7)(12,"p",8),e(13," The idea is to basically follow the interface that "),i(14,"code"),e(15,"nvm"),t(),e(16," provides; with some new abstractions that generalise to services. Everything can have a service, from a database to a programming language (the latter being a "),i(17,"a",9),e(18,"language server"),t(),e(19,"). "),t()(),i(20,"div",7)(21,"h2",10),e(22,"Command-Line Help for "),i(23,"code"),e(24,"NAME-version-manager-rs"),t()(),i(25,"p"),e(26,"This document contains the help content for the "),i(27,"code"),e(28,"NAME-version-manager-rs"),t(),e(29," command-line program."),t(),i(30,"p")(31,"strong"),e(32,"Command Overview:"),t()(),i(33,"ul")(34,"li")(35,"a",11)(36,"code"),e(37,"NAME-version-manager-rs"),t(),e(38,"\u21B4"),t()(),i(39,"li")(40,"a",12)(41,"code"),e(42,"NAME-version-manager-rs download"),t(),e(43,"\u21B4"),t()(),i(44,"li")(45,"a",13)(46,"code"),e(47,"NAME-version-manager-rs download-plan"),t(),e(48,"\u21B4"),t()(),i(49,"li")(50,"a",14)(51,"code"),e(52,"NAME-version-manager-rs env"),t(),e(53,"\u21B4"),t()(),i(54,"li")(55,"a",15)(56,"code"),e(57,"NAME-version-manager-rs install"),t(),e(58,"\u21B4"),t()(),i(59,"li")(60,"a",16)(61,"code"),e(62,"NAME-version-manager-rs install-dependencies"),t(),e(63,"\u21B4"),t()(),i(64,"li")(65,"a",17)(66,"code"),e(67,"NAME-version-manager-rs ls"),t(),e(68,"\u21B4"),t()(),i(69,"li")(70,"a",18)(71,"code"),e(72,"NAME-version-manager-rs ls-remote"),t(),e(73,"\u21B4"),t()(),i(74,"li")(75,"a",19)(76,"code"),e(77,"NAME-version-manager-rs uri"),t(),e(78,"\u21B4"),t()(),i(79,"li")(80,"a",20)(81,"code"),e(82,"NAME-version-manager-rs service"),t(),e(83,"\u21B4"),t()(),i(84,"li")(85,"a",21)(86,"code"),e(87,"NAME-version-manager-rs service install"),t(),e(88,"\u21B4"),t()(),i(89,"li")(90,"a",22)(91,"code"),e(92,"NAME-version-manager-rs service install open-rc"),t(),e(93,"\u21B4"),t()(),i(94,"li")(95,"a",23)(96,"code"),e(97,"NAME-version-manager-rs service install systemd"),t(),e(98,"\u21B4"),t()(),i(99,"li")(100,"a",24)(101,"code"),e(102,"NAME-version-manager-rs service install windows-service"),t(),e(103,"\u21B4"),t()(),i(104,"li")(105,"a",25)(106,"code"),e(107,"NAME-version-manager-rs service reload"),t(),e(108,"\u21B4"),t()(),i(109,"li")(110,"a",26)(111,"code"),e(112,"NAME-version-manager-rs service start"),t(),e(113,"\u21B4"),t()(),i(114,"li")(115,"a",27)(116,"code"),e(117,"NAME-version-manager-rs service stop"),t(),e(118,"\u21B4"),t()()(),i(119,"h4",28)(120,"code"),e(121,"NAME-version-manager-rs"),t()(),i(122,"p")(123,"strong"),e(124,"Usage:"),t(),i(125,"code"),e(126,"NAME-version-manager-rs [OPTIONS] <COMMAND>"),t()(),i(127,"h6",29)(128,"strong"),e(129,"Subcommands:"),t()(),i(130,"ul")(131,"li")(132,"code"),e(133,"download"),t(),e(134," \u2014 Download specified version"),t(),i(135,"li")(136,"code"),e(137,"download-plan"),t(),e(138," \u2014 Resolve download URL and hash/checksum. Useful for security and concurrency. "),t(),i(139,"li")(140,"code"),e(141,"env"),t(),e(142," \u2014 Print out associated environment variables"),t(),i(143,"li")(144,"code"),e(145,"install"),t(),e(146," \u2014 Install specified version"),t(),i(147,"li")(148,"code"),e(149,"install-dependencies"),t(),e(150," \u2014 Install (only) dependencies for specified version "),t(),i(151,"li")(152,"code"),e(153,"ls"),t(),e(154," \u2014 List what versions are installed"),t(),i(155,"li")(156,"code"),e(157,"ls-remote"),t(),e(158," \u2014 List what versions are available"),t(),i(159,"li")(160,"code"),e(161,"uri"),t(),e(162," \u2014 Print out database connection string"),t(),i(163,"li")(164,"code"),e(165,"service"),t(),e(166," \u2014 Service management"),t()(),i(167,"h6",30)(168,"strong"),e(169,"Options:"),t()(),i(170,"ul")(171,"li")(172,"p")(173,"code"),e(174,"--vms-config <VMS_CONFIG>"),t(),e(175," \u2014 Config file to read from. If provided used as new default (before env and argv res)"),t(),i(176,"p"),e(177,"Default value: "),i(178,"code"),e(179,"$HOME/version-managers/NAME-version-manager-rs/vms-config.json"),t()()(),i(180,"li")(181,"p")(182,"code"),e(183,"--config-read"),t(),e(184," \u2014 Whether to read from config file. If vms_config provided, this defaults to "),i(185,"code"),e(186,"true"),t()(),i(187,"p"),e(188,"Default value: "),i(189,"code"),e(190,"false"),t()()(),i(191,"li")(192,"p")(193,"code"),e(194,"--config-write"),t(),e(195," \u2014 Whether to write to config file"),t(),i(196,"p"),e(197,"Default value: "),i(198,"code"),e(199,"true"),t()()(),i(200,"li")(201,"p")(202,"code"),e(203,"--app-version <APP_VERSION>"),t(),e(204," \u2014 Desired version of application"),t(),i(205,"p"),e(206,"Default value: "),i(207,"code"),e(208,"latest"),t()()(),i(209,"li")(210,"p")(211,"code"),e(212,"--vm-root <VM_ROOT>"),t(),e(213," \u2014 root directory for all version-managers. For download cache and interdependencies"),t(),i(214,"p"),e(215,"Default value: "),i(216,"code"),e(217,"$HOME/version-managers"),t()()(),i(218,"li")(219,"p")(220,"code"),e(221,"--root <ROOT>"),t(),e(222," \u2014 Root directory. By default all paths are relative to this one"),t(),i(223,"p"),e(224,"Default value: "),i(225,"code"),e(226,"$HOME/version-managers/NAME-version-manager-rs"),t()()(),i(227,"li")(228,"p")(229,"code"),e(230,"--hostname <HOSTNAME>"),t(),e(231," \u2014 Hostname of server"),t(),i(232,"p"),e(233,"Default value: "),i(234,"code"),e(235,"localhost"),t()()(),i(236,"li")(237,"p")(238,"code"),e(239,"-p"),t(),e(240,", "),i(241,"code"),e(242,"--port <PORT>"),t(),e(243," \u2014 Port for server to listen on"),t()(),i(244,"li")(245,"p")(246,"code"),e(247,"--database <DATABASE>"),t(),e(248," \u2014 Database name"),t(),i(249,"p"),e(250,"Default value: "),i(251,"code"),e(252,"database"),t()()(),i(253,"li")(254,"p")(255,"code"),e(256,"--runtime-path <RUNTIME_PATH>"),t(),e(257," \u2014 Runtime path. This is where PID files and/or similar temporary files are stored"),t(),i(258,"p"),e(259,"Default value: "),i(260,"code"),e(261,"$HOME/version-managers/NAME-version-manager-rs/NAME-version-manager-rs/$APP_VERSION/run"),t()()(),i(262,"li")(263,"p")(264,"code"),e(265,"--data-path <DATA_PATH>"),t(),e(266," \u2014 Data path. This is where the actual data is stored, e.g., the .db and WAL files"),t(),i(267,"p"),e(268,"Default value: "),i(269,"code"),e(270,"$HOME/version-managers/NAME-version-manager-rs/NAME-version-manager-rs/$APP_VERSION/data"),t()()(),i(271,"li")(272,"p")(273,"code"),e(274,"--bin-path <BIN_PATH>"),t(),e(275," \u2014 Binary path. Where the executable binary are located. Sometimes called PREFIX"),t(),i(276,"p"),e(277,"Default value: "),i(278,"code"),e(279,"$HOME/version-managers/NAME-version-manager-rs/NAME-version-manager-rs/$APP_VERSION/bin"),t()()(),i(280,"li")(281,"p")(282,"code"),e(283,"--logs-path <LOGS_PATH>"),t(),e(284," \u2014 Logs path. Where the log files are to be stored"),t(),i(285,"p"),e(286,"Default value: "),i(287,"code"),e(288,"$HOME/version-managers/NAME-version-manager-rs/NAME-version-manager-rs/$APP_VERSION/logs"),t()()(),i(289,"li")(290,"p")(291,"code"),e(292,"--locale <LOCALE>"),t(),e(293," \u2014 Locale to use"),t(),i(294,"p"),e(295,"Default value: "),i(296,"code"),e(297,"en_US.UTF-8"),t()()(),i(298,"li")(299,"p")(300,"code"),e(301,"--markdown-help"),t(),e(302," \u2014 Markdown help generator. Only really used to generate replacement README.md files"),t()()(),i(303,"h4",31)(304,"code"),e(305,"NAME-version-manager-rs download"),t()(),i(306,"p"),e(307,"Download specified version"),t(),i(308,"p")(309,"strong"),e(310,"Usage:"),t(),i(311,"code"),e(312,"NAME-version-manager-rs download [VERSION]"),t()(),i(313,"h6",32)(314,"strong"),e(315,"Arguments:"),t()(),i(316,"ul")(317,"li")(318,"code"),e(319,"<VERSION>"),t(),e(320," \u2014 version to install, defaults to global arg if provided otherwise env var "),t()(),i(321,"h4",33)(322,"code"),e(323,"NAME-version-manager-rs download-plan"),t()(),i(324,"p"),e(325,"Resolve download URL and hash/checksum. Useful for security and concurrency."),t(),i(326,"p")(327,"strong"),e(328,"Usage:"),t(),i(329,"code"),e(330,"NAME-version-manager-rs download-plan [VERSION]"),t()(),i(331,"h6",34)(332,"strong"),e(333,"Arguments:"),t()(),i(334,"ul")(335,"li")(336,"code"),e(337,"<VERSION>"),t(),e(338," \u2014 version to install, defaults to global arg if provided otherwise env var "),t()(),i(339,"h4",35)(340,"code"),e(341,"NAME-version-manager-rs env"),t()(),i(342,"p"),e(343,"Print out associated environment variables"),t(),i(344,"p")(345,"strong"),e(346,"Usage:"),t(),i(347,"code"),e(348,"NAME-version-manager-rs env"),t()(),i(349,"h4",36)(350,"code"),e(351,"NAME-version-manager-rs install"),t()(),i(352,"p"),e(353,"Install specified version"),t(),i(354,"p")(355,"strong"),e(356,"Usage:"),t(),i(357,"code"),e(358,"NAME-version-manager-rs install [VERSION] [SKIP_DEPENDENCIES]..."),t()(),i(359,"h6",37)(360,"strong"),e(361,"Arguments:"),t()(),i(362,"ul")(363,"li")(364,"code"),e(365,"<VERSION>"),t(),e(366," \u2014 version to install, defaults to global arg if provided otherwise env var "),t(),i(367,"li")(368,"code"),e(369,"<SKIP_DEPENDENCIES>"),t(),e(370," \u2014 dependencies to skip installation of, defaults to install all. Skip all with * "),t()(),i(371,"h4",38)(372,"code"),e(373,"NAME-version-manager-rs install-dependencies"),t()(),i(374,"p"),e(375,"Install (only) dependencies for specified version"),t(),i(376,"p")(377,"strong"),e(378,"Usage:"),t(),i(379,"code"),e(380,"NAME-version-manager-rs install-dependencies [VERSION]"),t()(),i(381,"h6",39)(382,"strong"),e(383,"Arguments:"),t()(),i(384,"ul")(385,"li")(386,"code"),e(387,"<VERSION>"),t(),e(388," \u2014 version to install, defaults to global arg if provided otherwise env var "),t()(),i(389,"h4",40)(390,"code"),e(391,"NAME-version-manager-rs ls"),t()(),i(392,"p"),e(393,"List what versions are installed"),t(),i(394,"p")(395,"strong"),e(396,"Usage:"),t(),i(397,"code"),e(398,"NAME-version-manager-rs ls"),t()(),i(399,"h4",41)(400,"code"),e(401,"NAME-version-manager-rs ls-remote"),t()(),i(402,"p"),e(403,"List what versions are available"),t(),i(404,"p")(405,"strong"),e(406,"Usage:"),t(),i(407,"code"),e(408,"NAME-version-manager-rs ls-remote"),t()(),i(409,"h4",42)(410,"code"),e(411,"NAME-version-manager-rs uri"),t()(),i(412,"p"),e(413,"Print out database connection string"),t(),i(414,"p")(415,"strong"),e(416,"Usage:"),t(),i(417,"code"),e(418,"NAME-version-manager-rs uri"),t()(),i(419,"h4",43)(420,"code"),e(421,"NAME-version-manager-rs service"),t()(),i(422,"p"),e(423,"Service management"),t(),i(424,"p")(425,"strong"),e(426,"Usage:"),t(),i(427,"code"),e(428,"NAME-version-manager-rs service <COMMAND>"),t()(),i(429,"h6",44)(430,"strong"),e(431,"Subcommands:"),t()(),i(432,"ul")(433,"li")(434,"code"),e(435,"install"),t(),e(436," \u2014 Install service (daemon), e.g., systemd, OpenRC, windows-service "),t(),i(437,"li")(438,"code"),e(439,"reload"),t(),e(440," \u2014 Reload specified version"),t(),i(441,"li")(442,"code"),e(443,"start"),t(),e(444," \u2014 Start specified version"),t(),i(445,"li")(446,"code"),e(447,"stop"),t(),e(448," \u2014 Stop specified version"),t()(),i(449,"h4",45)(450,"code"),e(451,"NAME-version-manager-rs service install"),t()(),i(452,"p"),e(453,"Install service (daemon), e.g., systemd, OpenRC, windows-service"),t(),i(454,"p")(455,"strong"),e(456,"Usage:"),t(),i(457,"code"),e(458,"NAME-version-manager-rs service install install <COMMAND>"),t()(),i(459,"h6",46)(460,"strong"),e(461,"Subcommands:"),t()(),i(462,"ul")(463,"li")(464,"code"),e(465,"open-rc"),t(),e(466," \u2014 Install OpenRC service"),t(),i(467,"li")(468,"code"),e(469,"systemd"),t(),e(470," \u2014 Install systemd service"),t(),i(471,"li")(472,"code"),e(473,"windows-service"),t(),e(474," \u2014 Install Windows Service"),t()(),i(475,"h4",47)(476,"code"),e(477,"NAME-version-manager-rs service install open-rc"),t()(),i(478,"p"),e(479,"Install OpenRC service"),t(),i(480,"p")(481,"strong"),e(482,"Usage:"),t(),i(483,"code"),e(484,"NAME-version-manager-rs service install open-rc [OPTIONS]"),t()(),i(485,"h6",48)(486,"strong"),e(487,"Options:"),t()(),i(488,"ul")(489,"li")(490,"p")(491,"code"),e(492,"--group <GROUP>"),t(),e(493," \u2014 user group to run service as"),t(),i(494,"p"),e(495,"Default value: "),i(496,"code"),e(497,"NAME-version-manager-rs"),t()()(),i(498,"li")(499,"p")(500,"code"),e(501,"--config-install-path <CONFIG_INSTALL_PATH>"),t(),e(502," \u2014 where to install the config file"),t(),i(503,"p"),e(504,"Default value: "),i(505,"code"),e(506,"/etc/conf.d/NAME-version-manager-rs"),t()()(),i(507,"li")(508,"p")(509,"code"),e(510,"--service-install-path <SERVICE_INSTALL_PATH>"),t(),e(511," \u2014 where to install the service file"),t(),i(512,"p"),e(513,"Default value: "),i(514,"code"),e(515,"/etc/init.d/NAME-version-manager-rs"),t()()(),i(516,"li")(517,"p")(518,"code"),e(519,"--user <USER>"),t(),e(520," \u2014 user to run service as"),t(),i(521,"p"),e(522,"Default value: "),i(523,"code"),e(524,"NAME-version-manager-rs"),t()()()(),i(525,"h4",49)(526,"code"),e(527,"NAME-version-manager-rs service install systemd"),t()(),i(528,"p"),e(529,"Install systemd service"),t(),i(530,"p")(531,"strong"),e(532,"Usage:"),t(),i(533,"code"),e(534,"NAME-version-manager-rs service install systemd [OPTIONS]"),t()(),i(535,"h6",50)(536,"strong"),e(537,"Options:"),t()(),i(538,"ul")(539,"li")(540,"p")(541,"code"),e(542,"--group <GROUP>"),t(),e(543," \u2014 user group to run service as"),t(),i(544,"p"),e(545,"Default value: "),i(546,"code"),e(547,"NAME-version-manager-rs"),t()()(),i(548,"li")(549,"p")(550,"code"),e(551,"--service-install-path <SERVICE_INSTALL_PATH>"),t(),e(552," \u2014 where to install the service file"),t(),i(553,"p"),e(554,"Default value: "),i(555,"code"),e(556,"/etc/systemd/system/NAME-version-manager-rs.service"),t()()(),i(557,"li")(558,"p")(559,"code"),e(560,"--user <USER>"),t(),e(561," \u2014 user to run service as"),t(),i(562,"p"),e(563,"Default value: "),i(564,"code"),e(565,"NAME-version-manager-rs"),t()()()(),i(566,"h4",51)(567,"code"),e(568,"NAME-version-manager-rs service install windows-service"),t()(),i(569,"p"),e(570,"Install Windows Service"),t(),i(571,"p")(572,"strong"),e(573,"Usage:"),t(),i(574,"code"),e(575,"NAME-version-manager-rs service install windows-service [OPTIONS]"),t()(),i(576,"h6",52)(577,"strong"),e(578,"Options:"),t()(),i(579,"ul")(580,"li")(581,"p")(582,"code"),e(583,"--service-name <SERVICE_NAME>"),t(),e(584," \u2014 name of service"),t(),i(585,"p"),e(586,"Default value: "),i(587,"code"),e(588,"NAME-version-manager-rs"),t()()(),i(589,"li")(590,"p")(591,"code"),e(592,"--service-description <SERVICE_DESCRIPTION>"),t(),e(593," \u2014 description of service"),t(),i(594,"p"),e(595,"Default value: ``"),t()()(),i(596,"h4",53)(597,"code"),e(598,"NAME-version-manager-rs service reload"),t()(),i(599,"p"),e(600,"Reload specified version"),t(),i(601,"p")(602,"strong"),e(603,"Usage:"),t(),i(604,"code"),e(605,"NAME-version-manager-rs service reload [VERSION]"),t()(),i(606,"h6",54)(607,"strong"),e(608,"Arguments:"),t()(),i(609,"ul")(610,"li")(611,"code"),e(612,"<VERSION>"),t(),e(613," \u2014 version to install, defaults to global arg if provided otherwise env var "),t()(),i(614,"h4",55)(615,"code"),e(616,"NAME-version-manager-rs service start"),t()(),i(617,"p"),e(618,"Start specified version"),t(),i(619,"p")(620,"strong"),e(621,"Usage:"),t(),i(622,"code"),e(623,"NAME-version-manager-rs service start [VERSION]"),t()(),i(624,"h6",56)(625,"strong"),e(626,"Arguments:"),t()(),i(627,"ul")(628,"li")(629,"code"),e(630,"<VERSION>"),t(),e(631," \u2014 version to install, defaults to global arg if provided otherwise env var "),t()(),i(632,"h4",57)(633,"code"),e(634,"NAME-version-manager-rs service stop"),t()(),i(635,"p"),e(636,"Stop specified version"),t(),i(637,"p")(638,"strong"),e(639,"Usage:"),t(),i(640,"code"),e(641,"NAME-version-manager-rs service stop [VERSION]"),t()(),i(642,"h6",58)(643,"strong"),e(644,"Arguments:"),t()(),i(645,"ul")(646,"li")(647,"code"),e(648,"<VERSION>"),t(),e(649," \u2014 version to install, defaults to global arg if provided otherwise env var "),t()()()(),i(650,"header",59)(651,"h2",2),e(652,"verman.toml specification"),t()(),i(653,"div",4)(654,"div",60)(655,"div",6)(656,"code"),e(657,"verman.toml"),t(),e(658," example (syntax version 0.0.1-gamma) "),t()(),i(659,"div",7)(660,"p",8)(661,"code"),e(662,"verman.toml"),t(),e(663," is an extension of the large-number of independent version-manager approach. Think of it analogously to docker-compose. "),t(),i(664,"p",8),e(665," What follows is an example that deploys the following: "),t(),i(666,"ul")(667,"li"),e(668,"Ruby REST API (behind a Ruby application server)"),t(),i(669,"li"),e(670,"Python REST API (behind a Python application server)"),t(),i(671,"li"),e(672,"Database (SQL compatible)"),t(),i(673,"li"),e(674,"Reverse proxy (that routes to the Ruby and Python APIs and serves the static files)"),t()(),i(675,"p",8),e(676," Place a single "),i(677,"code"),e(678,"verman.toml"),t(),e(679," file in your repo root or "),i(680,"code"),e(681,"./config"),t(),e(682," subdirectory. The smallest example that does the above would be:"),t(),i(683,"pre",61)(684,"code"),e(685,`
[[stack.database]]
kind = "sql"

[[stack_routing]]
# Technically optional; could be inferred from \`CNAME\` file
name = "my_name.verman.io"

`),t()(),i(686,"p",8),e(687,"\u2026 with more complex TOML\u2014that still does the same\u2014succeeding:"),t()(),i(688,"div",62)(689,"div",63),e(690,"Prelude"),t(),i(691,"pre",61)(692,"code"),e(693,'\nname = "verman-schema-rs"\nversion = "0.0.1"\nlicense = "(Apache-2.0 OR MIT)"\nhomepage = "https://verman.io"\nrepo = "https://github.com/verman-io"\nauthors = [ "Samuel Marks <@SamuelMarks>" ]\n\n# ^ these are inferred from package.json,\n# pyproject.toml, setup.py &etc. if not provided\n\n[verman]\n# - `"#!/jq"` uses internal `jaq` dependency if feature `jaq` else errs\n# - `"#!/js"` uses internal JavaScript dependency based on deno if feature `js` enabled else errs\n# - `"#!/deno"` uses internal JavaScript dependency based on deno if feature `js` enabled else errs\n# - `"#!/wasm"` uses internal JavaScript dependency based on deno if feature `js` enabled else errs\n# - `"#!/lua"` uses internal Lua dependency if feature `lua` enabled else errs\n# - `"#!/python"` uses internal Python dependency if feature `python` enabled else errs\n# - `"#!/echo` simply outputs the lines after shebang\nshell = "#!/jq"\n'),t()()(),i(694,"div",62)(695,"div",63),e(696,"States / deploy semantics"),t(),i(697,"pre",61)(698,"code"),e(699,`
enum State {
   /// [app/component] install or reinstall
   /// [service] start or restart
   "always",

   /// [app/component] install if not installed
   /// [service] reload if stopped otherwise start
   "graceful",

   /// [service] ping: if not started/installed:
   /// - ping next service in array until end
   /// - error if no services are pingable
   /// - otherwise set env var | config for pingable service
   "untouched",

   /// [service] stop service (if service is running)
   "stop",

   /// [service] uninstall service (if installed)
   /// [app/component] uninstall (if installed)
   "remove",

   /// [service] list which services would be started
   /// [app/component] list what would be installed* (*without making any network requests)
   "dry_run"
}

`),t()()(),i(700,"div",62)(701,"div",63),e(702,"States / deploy configuration"),t(),i(703,"pre",61)(704,"code"),e(705,`
[stack_state.database]
kind = "sql"
install = "always"
start = "always"

[stack_state.application_server]
install = "always"
start = "always"

[stack_state.routing]
install = "always"
start = "always"

`),t()()(),i(706,"div",62)(707,"div",63),e(708,"Stack configuration"),t(),i(709,"pre",61)(710,"code"),e(711,`
[[stack.database]]
kind = "sql"

[[stack.application_server]]
kind = "python"
# other than \`kind\`; rest optional:
versions = [ "~2.7", "~3.6", "~3.13" ]
server_priority = [ "Waitress", "mod_wsgi", "uvicorn" ]

[[stack.application_server]]
kind = "ruby"

`),t()()(),i(712,"div",62)(713,"div",63),e(714,"Stack (routing)"),t(),i(715,"pre",61)(716,"code"),e(717,`
[[stack_routing]]
# \`name\` is optional if no \`CNAME\` file
name = "my_name.verman.io"
# rest optional:
protocol = "https"
certificate_vendor = "LetsEncrypt"
provider = "nginx"  # AWS Route 53 | Apache | ...
provider_version = "*"

`),t()()(),i(718,"div",62)(719,"div",63),e(720,"Component configuration"),t(),i(721,"pre",61)(722,"code"),e(723,`
[[component]]
src_uri = "file://python_api_folder/"
dst_uri = "http://localhost:\${PYTHON_API_PORT}"

[[component.constraints]]
kind = "lang"
required_variant = "python"

[[component.constraints]]
kind = "OS"

[[component]]
src_uri = "file://ruby_api_folder/"
dst_uri = 'if $OS == "windows" then "\\\\.\\pipe\\PipeName" else "unix:///var/run/my-socket.sock"'

[[component.constraints]]
kind = "lang"
required_variant = "ruby"
required_version = ">3.1.2, <3.2"

[[component.constraints]]
kind = "OS"
required_variant = "$OS | in({\\"linux\\" || \\"windows\\"})"

[[component]]
dst_uri = "my_app.verman.io"

[[component.constraints]]
kind = "routing"

[component.env_vars]
COMPONENT_NAME = "mount_component"

[[component.mounts]]
when = "$OS == \\"windows\\""
uri = "file://win_nginx.conf"
action = "nginx::make_site_available"

[component.mounts.action_args]
upsert = true

[[component.mounts]]
when = "any(.; .component[].mounts[]?.action | startswith(\\"nginx::\\"))"
uri = "/api/py"
src_uri = ".component[] | select(.constraints | any([.kind, .required_variant] == [\\"lang\\", \\"python\\"])).dst_uri"
action = "mount::expose"

[[component.mounts]]
when = "any(.; .component[].mounts[]?.action | startswith(\\"nginx::\\"))"
uri = "/api/ruby"
src_uri = ".component[] | select(.constraints | any([.kind, .required_variant] == [\\"lang\\", \\"ruby\\"])).dst_uri"
action = "mount::expose"

[[component.mounts]]
when = "$BUILD_TIME > 2024"
uri = "/api/demo"
action = "mount::expose"

[env_vars]
DEBUG_ROOT = "true"
      `),t()()()())},dependencies:[u,b],styles:[".sidenav-content[_ngcontent-%COMP%]{min-height:100vh;padding:20px 3rem 2rem;max-width:50em;margin:0}@media screen and (max-width: 600px){.sidenav-content[_ngcontent-%COMP%]{min-height:450px;padding:80px 2rem 1rem}}@media screen and (max-width: 480px){.sidenav-content[_ngcontent-%COMP%]{padding:80px 1rem 1rem}}mat-form-field[_ngcontent-%COMP%]{width:100%}"]})}}return n})();var T=[{path:"more",component:L},{path:"verman-spec",component:I}];var Ue=(()=>{class n{static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275mod=d({type:n})}static{this.\u0275inj=o({imports:[v,p,p.forChild(T),y,M,E,R,w]})}}return n})();export{Ue as DocModule};
